{"version":3,"sources":["redux/memorySlice.js","components/Item.jsx","App.js","reportWebVitals.js","redux/index.js","index.js"],"names":["memorySlice","createSlice","name","initialState","items","shuffledItems","completedItems","checkItemsList","point","reducers","shuffleItems","state","array","i","length","j","Math","floor","random","checkItems","index","push","clickItem","action","payload","restartGame","actions","Item","item","dispatch","useDispatch","useSelector","memory","willShown","includes","some","disabled","done","className","isDisabled","onClick","e","setTimeout","bg","height","fontSize","fontWeight","App","useEffect","points","alignItems","justify","flexDir","w","mx","pb","mt","spacing","columns","map","mr","size","color","as","variant","colorScheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","memoryReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b79dde1.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst memorySlice = createSlice({\r\n  name: 'memory',\r\n  initialState: {\r\n    items: [\r\n      'A',\r\n      'B',\r\n      'C',\r\n      'D',\r\n      'E',\r\n      'F',\r\n      'G',\r\n      'H',\r\n      'J',\r\n      'K',\r\n      'L',\r\n      'M',\r\n      'N',\r\n      'O',\r\n      'P'],\r\n    shuffledItems: [],\r\n    completedItems: [],\r\n    checkItemsList: [],\r\n    point: 0\r\n  },\r\n  reducers: {\r\n    shuffleItems: (state) => {\r\n      let array = [...state.items, ...state.items]\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      state.shuffledItems = array\r\n    },\r\n    checkItems: (state) => {\r\n      if (state.checkItemsList.length === 2\r\n          && state.checkItemsList[0].name === state.checkItemsList[1].name\r\n          && state.checkItemsList[0].index !== state.checkItemsList[1].index) {\r\n        state.completedItems.push(state.checkItemsList[0].name)\r\n        state.point += 50\r\n        state.checkItemsList = []\r\n      } else if (state.checkItemsList.length >= 2) {\r\n        state.point -= 10\r\n        state.checkItemsList = []\r\n      }\r\n    },\r\n    clickItem: (state, action) => {\r\n      const {name, index} = action.payload\r\n      state.checkItemsList.push({name, index})\r\n    },\r\n    restartGame: (state) => {\r\n      let array = [...state.items, ...state.items]\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      state.shuffledItems = array\r\n      state.completedItems = []\r\n      state.checkItemsList = []\r\n      state.point = 0\r\n    }\r\n  }\r\n});\r\n\r\nexport default memorySlice.reducer;\r\nexport const {shuffleItems, clickItem, checkItems,restartGame} = memorySlice.actions;","import {Button, Text} from '@chakra-ui/react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {checkItems, clickItem} from '../redux/memorySlice'\r\nimport {useState} from 'react'\r\n\r\nconst Item = ({item, index}) => {\r\n\r\n  const dispatch = useDispatch()\r\n  const completedItems = useSelector(state => state.memory.completedItems)\r\n  const checkItemsList = useSelector(state => state.memory.checkItemsList)\r\n  let willShown = completedItems.includes(item) ||\r\n      checkItemsList.some(i => i.index === index && i.name === item)\r\n  let disabled = willShown || checkItemsList.length >= 2\r\n  const done = completedItems.includes(item)\r\n\r\n  const className = `${done && 'done'} ${disabled && \"disabled\"}`\r\n\r\n  function handleClick(e) {\r\n    if (disabled) {\r\n      return\r\n    }\r\n    dispatch(clickItem({name: item, index}))\r\n    setTimeout(() => {\r\n      dispatch(checkItems())\r\n    }, 1200)\r\n  }\r\n\r\n  return (\r\n      <Button isDisabled={willShown}\r\n              onClick={handleClick}\r\n              bg={'pink.600'}\r\n              height={'80px'}\r\n              item={item}\r\n              className={className}>\r\n        <Text fontSize={'4xl'} fontWeight={'extrabold'}>{willShown && item}</Text>\r\n      </Button>\r\n  );\r\n};\r\n\r\nexport default Item;","import './App.css';\nimport {Button, Flex, Heading, SimpleGrid, Spacer, Text} from '@chakra-ui/react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {restartGame, shuffleItems} from './redux/memorySlice'\nimport Item from './components/Item'\nimport {useEffect} from 'react'\n\nfunction App() {\n\n  const dispatch = useDispatch()\n\n  useEffect(()=> {\n    dispatch(shuffleItems())\n  },[])\n\n\n\n  const shuffledItems = useSelector(state => state.memory.shuffledItems)\n  const points = useSelector(state => state.memory.point)\n  return (\n      <Flex alignItems={'center'} justify={\"center\"} flexDir={\"column\"} w=\"90%\" mx=\"auto\" pb={10} >\n        <Heading mt={2}>Memory Game</Heading>\n        <SimpleGrid w={\"80%\"} mt={\"5\"} spacing={3} columns={5} >\n          {\n            shuffledItems.map((item,index)=>(\n                <Item key={index} index={index} item={item}/>\n            ))\n          }\n        </SimpleGrid>\n        <Flex mt={4}  w={\"80%\"} justify={'space-between'}>\n          <Heading mr={5} size={'lg'}>Points : <Text color={points<0 ? \"red\" : \"green\"} as={\"span\"}>{points}</Text> </Heading>\n          <Button variant={'solid'} colorScheme={'red'}\n                  onClick={()=> {dispatch(restartGame())}}>Restart Game</Button>\n        </Flex>\n      </Flex>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport memoryReducer from './memorySlice';\r\n\r\nconst  store = configureStore({\r\n  reducer:{\r\n    memory:memoryReducer\r\n  }\r\n})\r\n\r\nexport default store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux';\nimport {Provider} from 'react-redux';\nimport {ChakraProvider} from '@chakra-ui/react'\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <ChakraProvider>\n          <App/>\n        </ChakraProvider>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}